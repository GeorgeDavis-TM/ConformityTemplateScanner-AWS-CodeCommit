{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Trend Micro Conformity Template Scanner - AWS CodeCommit App",
    "Parameters": {
        "LambdaFunctionName": {
            "Type": "String",
            "Default": "AwsCodeCommitConformityTemplateScanner"
        },
        "LambdaFunctionDescription": {
            "Type": "String",
            "Default": "Trend Micro Conformity Template Scanner & AWS CodeCommit API Integration"
        },
        "ConformityApiKey": {
            "Type": "String",
            "Default": ""
        },
        "S3BucketName": {
            "Type": "String",
            "Default": "cloudoneconformitytemplatescannerbucket"
        },
        "S3ObjectKey": {
            "Type": "String",
            "Default": "cloudformation-templates"
        },
        "CodeCommitArn": {
            "Type": "String"
        }
    },
    "Resources": {
        "LambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": { 
                "Code": {
                    "ZipFile": "import os\nimport json\nimport urllib3\nimport datetime\nimport boto3\n\ndef s3PutObj(fileName, fileObj, severityResponse):\n\tprint(\"--- S3 Put Object starts ---\")\n\tprint(str(os.environ.get('S3_BUCKET_NAME')) + \" - \" + str(os.environ.get('S3_OBJECT_KEY')))\n\ts3Client = boto3.client('s3')\n\n\ts3PutObjResponse = s3Client.put_object(\n\t\tBucket=str(os.environ.get('S3_BUCKET_NAME')),\n\t\tKey=str(os.environ.get('S3_OBJECT_KEY'))+\"/\"+fileName if os.environ.get('S3_OBJECT_KEY') != \"\" else fileName,\n\t\tBody=fileObj\n\t)\n\tprint(str(s3PutObjResponse))\n\n\ttempList = []\n\n\tfor severity in severityResponse.keys():\n\t\ttempList.append({'Key': str(severity), 'Value': str(severityResponse[severity])})\n\n\ts3PutObjTaggingResponse = s3Client.put_object_tagging(\n\t\tBucket=str(os.environ.get('S3_BUCKET_NAME')),\n\t\tKey=str(os.environ.get('S3_OBJECT_KEY'))+\"/\"+fileName if os.environ.get('S3_OBJECT_KEY') != \"\" else fileName,\n\t\tTagging={'TagSet': tempList}\n\t\t)\n\tprint(str(s3PutObjTaggingResponse))\n\ndef postConformityApi(ccApiKey, fileString):\n\theaders = {\"Content-Type\": \"application/vnd.api+json\",\"Authorization\": \"ApiKey \" + ccApiKey}\n\tdata = {\"data\": {\"attributes\": {\"type\": \"cloudformation-template\",\"contents\": fileString }}}\n\thttp = urllib3.PoolManager()\n\tr = http.request('POST', 'https://us-west-2-api.cloudconformity.com/v1/template-scanner/scan', headers=headers, body=json.dumps(data))\n\tresponseDict = json.loads(r.data)\n\treportDict = {}\n\tfor data in responseDict[\"data\"]:\n\t\tif data[\"type\"] == \"checks\":\n\t\t\tif str(data[\"attributes\"][\"risk-level\"]) not in reportDict:\n\t\t\t\treportDict.update({ data[\"attributes\"][\"risk-level\"]: 1 })\n\t\t\telse:\n\t\t\t\treportDict.update({ data[\"attributes\"][\"risk-level\"]: reportDict[data[\"attributes\"][\"risk-level\"]] + 1 })\n\tprint(str(reportDict))\n\treturn reportDict\n\ndef processJsonFile(ccApiKey, fileName, fileString):\n\tcfJsonDict = json.loads(fileString)\n\tif \"AWSTemplateFormatVersion\" in cfJsonDict:\n\t\tccResponse = postConformityApi(ccApiKey, fileString)\n\t\ts3PutObj(fileName, fileString, ccResponse)\n\ndef processYamlFile(ccApiKey, fileName, fileString):\n\tif \"AWSTemplateFormatVersion\" in fileString:\n\t\tccResponse = postConformityApi(ccApiKey, fileString)\n\t\ts3PutObj(fileName, fileString, ccResponse)\n\ndef lambda_handler(event, context):\n\tccApiKey = str(os.environ.get('CC_API_KEY'))\n\tsupportedFileExtensions = [\"json\", \"yaml\", \"yml\"]\n\tprint(\"\\nEvent: \" + str(event))\n\tprint(\"\\nContext: \" + str(context))\n\tcodeCommitClient = boto3.client('codecommit')\n\tfor record in event[\"Records\"]:\n\t\tprint(str(record[\"Sns\"][\"Message\"]))\n\t\tmessage = json.loads(record[\"Sns\"][\"Message\"])\n\n\t\tcodeCommitGetDiffResponse = codeCommitClient.get_differences(\n\t\t\trepositoryName=message[\"detail\"][\"repositoryName\"],\n\t\t\tbeforeCommitSpecifier=message[\"detail\"][\"oldCommitId\"],\n\t\t\tafterCommitSpecifier=message[\"detail\"][\"commitId\"]\n\t\t)\n\t\tprint(str(codeCommitGetDiffResponse))\n\n\t\tfor diff in codeCommitGetDiffResponse[\"differences\"]:\n\t\t\tcodeCommitGetBlobResponse = codeCommitClient.get_blob(\n\t\t\t\trepositoryName=message[\"detail\"][\"repositoryName\"],\n\t\t\t\tblobId=diff[\"afterBlob\"][\"blobId\"]\n\t\t\t)\n\n\t\t\tif ccApiKey != \"\" and diff[\"afterBlob\"][\"path\"].split(\".\")[-1].lower() in supportedFileExtensions:\n\t\t\t\tif \"afterBlob\" in diff:\n\t\t\t\t\tif diff[\"afterBlob\"][\"path\"].split(\".\")[-1].lower() == \"json\":\n\t\t\t\t\t\tprocessJsonFile(ccApiKey, diff[\"afterBlob\"][\"path\"], (codeCommitGetBlobResponse[\"content\"]).decode(\"utf-8\"))\n\t\t\t\t\telif diff[\"afterBlob\"][\"path\"].split(\".\")[-1].lower() == \"yaml\" or diff[\"afterBlob\"][\"path\"].split(\".\")[-1].lower() == \"yml\":\n\t\t\t\t\t\tprocessYamlFile(ccApiKey, diff[\"afterBlob\"][\"path\"], (codeCommitGetBlobResponse[\"content\"]).decode(\"utf-8\"))\n\t\t\telse:\n\t\t\t\tprint(\"Not a supported file.\")"
                },
                "Description": {
                    "Ref": "LambdaFunctionDescription"
                },
                "FunctionName": {
                    "Ref": "LambdaFunctionName"
                },
                "Handler": "index.lambda_handler",
                "MemorySize": 128,
                "Role": {
                    "Fn::GetAtt": [
                        "LambdaIAMRole",
                        "Arn"
                    ]
                },
                "Runtime": "python3.8",
                "Timeout": 40,
                "Environment": {
                    "Variables": {
                        "CC_API_KEY": {
                            "Ref": "ConformityApiKey"
                        },
                        "S3_BUCKET_NAME": {
                            "Ref": "ConformityS3Bucket"
                        },
                        "S3_OBJECT_KEY": {
                            "Ref": "S3ObjectKey"
                        }
                    }
                }
            }
        },
        "LambdaSnsInvoke": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "Action": "lambda:InvokeFunction",
                "FunctionName": {
                    "Fn::GetAtt": [
                        "LambdaFunction",
                        "Arn"
                    ]
                },
                "SourceArn": {
                    "Ref": "CodeCommitSnsTopic"
                },
                "Principal": "sns.amazonaws.com"
            }
        },
        "LambdaIAMRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Action": [
                                "sts:AssumeRole"
                            ],
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "lambda.amazonaws.com"
                                ]
                            }
                        }
                    ]
                },
                "Policies": [
                    {
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": [
                                        {
                                            "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${LambdaFunctionName}:*"
                                        }
                                    ]
                                },
                                {
                                    "Action": [
                                        "s3:GetObject",
                                        "s3:GetObjectAcl",
                                        "s3:PutObject",
                                        "s3:PutObjectAcl"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": [
                                        {
                                            "Fn::GetAtt": [
                                                "ConformityS3Bucket",
                                                "Arn"
                                            ]
                                        },
                                        {
                                            "Fn::Join": [
                                                "", [
                                                    {
                                                        "Fn::GetAtt": [
                                                            "ConformityS3Bucket",
                                                            "Arn"
                                                        ]
                                                    },
                                                    "/*"
                                                ]
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "Action": "codecommit:*",
                                    "Effect": "Allow",
                                    "Resource": {
                                        "Ref": "CodeCommitArn"
                                    }
                                }
                            ]
                        },
                        "PolicyName": "aws-codecommit-conformitytemplatescanner"
                    }
                ]
            }
        },
        "LambdaLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
                "LogGroupName": {
                    "Fn::Sub": "/aws/lambda/${LambdaFunctionName}"
                }
            }
        },
        "CodeCommitNotificationRule": {
            "Type": "AWS::CodeStarNotifications::NotificationRule",
            "Properties": {
                "DetailType": "BASIC",
                "EventTypeIds": [
                    "codecommit-repository-branches-and-tags-updated"
                ],
                "Name": "aws-codecommit-notification-rule",
                "Resource": {
                    "Ref": "CodeCommitArn"
                },  
                "Status": "ENABLED",
                "Tags": {
                    "Owner": "TrendMicro"
                },
                "Targets": [
                    {
                        "TargetType": "SNS",
                        "TargetAddress": {
                            "Ref": "CodeCommitSnsTopic"
                        }
                    }
                ]
            }
        },
        "CodeCommitSnsSubscription": {
            "Type" : "AWS::SNS::Subscription",
            "Properties" : {
                "Endpoint" : {
                    "Fn::GetAtt": [
                        "LambdaFunction",
                        "Arn"
                    ]
                },
                "Protocol" : "lambda",
                "TopicArn" : {
                    "Ref": "CodeCommitSnsTopic"
                }
            }
        },
        "CodeCommitSnsTopic": {
            "Type": "AWS::SNS::Topic",
            "Properties": {
                "DisplayName": "CloudOneConformityCodeCommitSnsTopic",
                "TopicName": "CloudOneConformityCodeCommitSnsTopic",
                "KmsMasterKeyId": {
                    "Fn::Join" : [ 
                        "", [ 
                            "arn:aws:kms:",
                            { "Ref" : "AWS::Region" },
                            ":",
                            { "Ref" : "AWS::AccountId" },
                            ":alias/aws/sns"
                        ] 
                    ]
                },
                "Tags": [
                    {
                        "Key": "Owner",
                        "Value": "TrendMicro"
                    },
                    {
                        "Key": "Product",
                        "Value": "CloudOneConformity"
                    },
                    {
                        "Key": "Name",
                        "Value": "CloudOneConformityCodeCommitSnsTopic"
                    }
                ]
            }
        },
        "ConformityS3Bucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
                "BucketName": {
                    "Ref": "S3BucketName"
                },
                "VersioningConfiguration": {
                    "Status": "Enabled"
                },
                "AccessControl": "Private",
                "BucketEncryption": {
                    "ServerSideEncryptionConfiguration": [
                        {
                            "ServerSideEncryptionByDefault": {
                                "SSEAlgorithm": "AES256"
                            }
                        }
                    ]
                },
                "Tags": [
                    {
                        "Key": "Owner",
                        "Value": "TrendMicro"
                    },
                    {
                        "Key": "Product",
                        "Value": "CloudOneConformity"
                    }
                ]
            }
        }
    },
    "Outputs": {
        "S3BucketName": {
            "Value": {
                "Ref": "ConformityS3Bucket"
            }
        },
        "S3ObjectKey": {
            "Value": {
                "Ref": "S3ObjectKey"
            }
        },
        "LambdaFunction": {
            "Value": {
                "Ref": "LambdaFunction"
            }
        },
        "CodeCommitSnsTopic": {
            "Value": {
                "Ref": "CodeCommitSnsTopic"
            }
        }
    }
}